{"version":3,"sources":["components/Thumbnails/Thumbnails.js","components/Header/Header.js","components/PhotoView/PhotoView.js","App.js","serviceWorker.js","index.js"],"names":["Thumbnails","useState","photos","setPhotos","page","setPage","disablePrevButton","setDisablePrevButton","disableNextButton","setDisableNextButton","useEffect","axios","get","then","response","loadedPhotos","data","catch","error","console","log","className","GridList","cellHeight","cols","map","photo","GridListTile","key","id","to","src","thumbnailUrl","alt","title","Button","variant","color","startIcon","onClick","disabled","endIcon","Header","AppBar","style","background","Toolbar","PhotoView","props","loadedProps","setPhoto","photoId","match","params","loadedPhoto","Card","CardActionArea","CardMedia","image","url","CardContent","Typography","component","history","push","CircularProgress","App","path","exact","Boolean","window","location","hostname","ReactDOM","render","StrictMode","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c5a49eb5.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport { GridList, GridListTile, Button } from \"@material-ui/core\";\r\nimport \"./Thumbnails.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\nimport ArrowForwardIcon from \"@material-ui/icons/ArrowForward\";\r\n\r\nfunction Thumbnails() {\r\n  const [photos, setPhotos] = useState([]);\r\n  const [page, setPage] = useState(1);\r\n  const [disablePrevButton, setDisablePrevButton] = useState(false);\r\n  const [disableNextButton, setDisableNextButton] = useState(false);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\r\n        `https://jsonplaceholder.typicode.com/photos?_page=${page}&_limit=10`\r\n      )\r\n      .then((response) => {\r\n        const loadedPhotos = response.data;\r\n        setPhotos(loadedPhotos);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\r\n          \"Couldn't fetch data from server due to the following error!\" + error\r\n        );\r\n      });\r\n  }, [page]);\r\n\r\n  const clickNextHandler = () => {\r\n    if (page < 500) {\r\n      setPage(page + 1);\r\n      setDisableNextButton(false);\r\n      setDisablePrevButton(false);\r\n    } else {\r\n      setDisableNextButton(true);\r\n    }\r\n  };\r\n\r\n  const clickPreviousHandler = () => {\r\n    if (page >= 2) {\r\n      setPage(page - 1);\r\n      setDisablePrevButton(false);\r\n      setDisableNextButton(false);\r\n    } else {\r\n      setDisablePrevButton(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"Thumbnails\">\r\n      <GridList cellHeight={100} cols={2}>\r\n        {photos.map((photo) => (\r\n          <GridListTile key={photo.id}>\r\n            <Link to={`/photo/${photo.id}`}>\r\n              <img src={photo.thumbnailUrl} alt={photo.title} />\r\n            </Link>\r\n          </GridListTile>\r\n        ))}\r\n      </GridList>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"default\"\r\n        startIcon={<ArrowBackIcon />}\r\n        onClick={clickPreviousHandler}\r\n        disabled={disablePrevButton}\r\n      >\r\n        Prev\r\n      </Button>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"default\"\r\n        endIcon={<ArrowForwardIcon />}\r\n        onClick={clickNextHandler}\r\n        disabled={disableNextButton}\r\n      >\r\n        Next\r\n      </Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Thumbnails;\r\n","import React from \"react\";\r\nimport { AppBar, Toolbar } from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./Header.css\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className=\"Header\">\r\n      <AppBar style={{ background: \"#2E3B55\" }}>\r\n        <Toolbar>\r\n          <Link to=\"/\">\r\n            <strong>Photo Gallery</strong>\r\n          </Link>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Card,\r\n  CardActionArea,\r\n  CardMedia,\r\n  Typography,\r\n  CardContent,\r\n  CircularProgress,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport \"./PhotoView.css\";\r\nimport axios from \"axios\";\r\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\";\r\n\r\nfunction PhotoView(props) {\r\n  const loadedProps = props;\r\n  const [photo, setPhoto] = useState(null);\r\n  const photoId = loadedProps.match.params.photoId;\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(`https://jsonplaceholder.typicode.com/photos/${photoId}`)\r\n      .then((response) => {\r\n        const loadedPhoto = response.data;\r\n        setPhoto(loadedPhoto);\r\n      })\r\n      .catch((error) => {\r\n        console.log(\r\n          \"Couldn't fetch data from server due to the following error!\" + error\r\n        );\r\n      });\r\n  }, [photoId]);\r\n\r\n  const backButtonHandler = () => {\r\n    props.history.push(\"/\");\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {photo ? (\r\n        <Card className=\"PhotoView\">\r\n          <CardActionArea>\r\n            <CardMedia\r\n              className=\"Media\"\r\n              image={photo.url}\r\n              title={photo.title}\r\n            />\r\n            <CardContent>\r\n              <Typography variant=\"body2\" component=\"h5\">\r\n                {photo.title}\r\n              </Typography>\r\n            </CardContent>\r\n          </CardActionArea>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"default\"\r\n            onClick={backButtonHandler}\r\n            startIcon={<ArrowBackIcon />}\r\n          >\r\n            Back To Home\r\n          </Button>\r\n        </Card>\r\n      ) : (\r\n        <CircularProgress className=\"Spinner\" />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PhotoView;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Thumbnails from \"./components/Thumbnails/Thumbnails\";\nimport Header from \"./components/Header/Header\";\nimport PhotoView from \"./components/PhotoView/PhotoView\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Switch>\n        <Route path=\"/\" exact component={Thumbnails} />\n        <Route path=\"/photo/:photoId\" component={PhotoView} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename=\"/photo-gallery\">\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}