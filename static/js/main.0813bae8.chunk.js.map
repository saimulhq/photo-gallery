{"version":3,"sources":["components/Thumbnails/Thumbnails.js","components/Header/Header.js","components/PhotoView/PhotoView.js","App.js","serviceWorker.js","index.js"],"names":["Thumbnails","useState","photos","setPhotos","page","setPage","disablePrevButton","setDisablePrevButton","disableNextButton","setDisableNextButton","useEffect","axios","get","then","response","loadedPhotos","data","catch","error","console","log","className","GridList","cellHeight","cols","map","photo","GridListTile","key","id","to","src","thumbnailUrl","alt","title","Button","variant","color","startIcon","onClick","disabled","endIcon","Header","AppBar","style","background","Toolbar","PhotoView","props","loadedProps","setPhoto","photoId","match","params","loadedPhoto","Card","CardActionArea","CardMedia","image","url","CardContent","Typography","component","history","push","CircularProgress","App","path","exact","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.0813bae8.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { GridList, GridListTile, Button } from '@material-ui/core';\r\nimport './Thumbnails.css';\r\nimport { Link } from 'react-router-dom';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\n\r\nfunction Thumbnails() {\r\n    const [photos, setPhotos] = useState([]);\r\n    const [page, setPage] = useState(1);\r\n    const [disablePrevButton, setDisablePrevButton] = useState(false);\r\n    const [disableNextButton, setDisableNextButton] = useState(false);\r\n\r\n    useEffect(() => {\r\n        axios.get(`https://jsonplaceholder.typicode.com/photos?_page=${page}&_limit=10`)\r\n            .then(response => {\r\n                const loadedPhotos = response.data;\r\n                setPhotos(loadedPhotos);\r\n            })\r\n            .catch(error => {\r\n                console.log(\"Couldn't fetch data from server due to the following error!\" + error);\r\n            });\r\n    }, [page]);\r\n\r\n    const clickNextHandler = () => {\r\n        if (page < 500) {\r\n            setPage(page + 1);\r\n            setDisableNextButton(false);\r\n            setDisablePrevButton(false);\r\n        }\r\n        else {\r\n            setDisableNextButton(true);\r\n        }\r\n    };\r\n\r\n    const clickPreviousHandler = () => {\r\n        if (page >= 2) {\r\n            setPage(page - 1);\r\n            setDisablePrevButton(false);\r\n            setDisableNextButton(false);\r\n        }\r\n        else {\r\n            setDisablePrevButton(true);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"Thumbnails\">\r\n            <GridList\r\n                cellHeight={100}\r\n                cols={2}>\r\n                {photos.map((photo) => (\r\n                    <GridListTile\r\n                        key={photo.id}>\r\n                        <Link\r\n                            to={`/photo-gallery/photo/${photo.id}`}>\r\n                            <img\r\n                                src={photo.thumbnailUrl}\r\n                                alt={photo.title} />\r\n                        </Link>\r\n                    </GridListTile>\r\n                ))}\r\n            </GridList>\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"default\"\r\n                startIcon={<ArrowBackIcon />}\r\n                onClick={clickPreviousHandler}\r\n                disabled={disablePrevButton}>Prev</Button>\r\n            <Button\r\n                variant=\"contained\"\r\n                color=\"default\"\r\n                endIcon={<ArrowForwardIcon />}\r\n                onClick={clickNextHandler}\r\n                disabled={disableNextButton}>Next</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Thumbnails;","import React from 'react';\r\nimport { AppBar, Toolbar } from '@material-ui/core';\r\nimport { Link } from 'react-router-dom';\r\nimport './Header.css';\r\n\r\nfunction Header() {\r\n    return (\r\n        <div\r\n            className=\"Header\">\r\n            <AppBar\r\n                style={{ background: '#2E3B55' }}>\r\n                <Toolbar>\r\n                    <Link\r\n                        to=\"/photo-gallery\"><strong>Photo Gallery</strong>\r\n                    </Link>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","import React, { useState, useEffect } from 'react';\r\nimport { Card, CardActionArea, CardMedia, Typography, CardContent, CircularProgress, Button } from '@material-ui/core';\r\nimport './PhotoView.css';\r\nimport axios from 'axios';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\n\r\nfunction PhotoView(props) {\r\n    const loadedProps = props;\r\n    const [photo, setPhoto] = useState(null);\r\n    const photoId = loadedProps.match.params.photoId;\r\n\r\n    useEffect(() => {\r\n        axios.get(`https://jsonplaceholder.typicode.com/photos/${photoId}`)\r\n            .then(response => {\r\n                const loadedPhoto = response.data;\r\n                setPhoto(loadedPhoto);\r\n            })\r\n            .catch(error => {\r\n                console.log(\"Couldn't fetch data from server due to the following error!\" + error);\r\n            });\r\n    }, [photoId]);\r\n\r\n    const backButtonHandler = () => {\r\n        props.history.push('/photo-gallery');\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {photo ? <Card className=\"PhotoView\">\r\n                <CardActionArea>\r\n                    <CardMedia\r\n                        className=\"Media\"\r\n                        image={photo.url}\r\n                        title={photo.title}\r\n                    />\r\n                    <CardContent>\r\n                        <Typography variant=\"body2\" component=\"h5\">\r\n                            {photo.title}\r\n                        </Typography>\r\n                    </CardContent>\r\n                </CardActionArea>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    onClick={backButtonHandler}\r\n                    startIcon={<ArrowBackIcon />}>Back To Home</Button>\r\n            </Card> : <CircularProgress className=\"Spinner\" />}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PhotoView;","import React from 'react';\nimport './App.css';\nimport { Switch, Route } from 'react-router-dom';\nimport Thumbnails from './components/Thumbnails/Thumbnails';\nimport Header from './components/Header/Header';\nimport PhotoView from './components/PhotoView/PhotoView';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Switch>\n        <Route path=\"/photo-gallery/\" exact component={Thumbnails} />\n        <Route path=\"/photo-gallery/photo/:photoId\" exact component={PhotoView} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}